[{"content":"注册LeanCloud 注册地址：https://console.leancloud.app/register（国际版） （如果是自己网页搜索的，注意必须注册国际版）\n进入控制台，点击左上角创建应用并起一个名字 ，这里必须选免费的开发版\n进入应用，点击项目左下角设置，再选择左下角的 设置、应用凭证，记录App ID、App Key和Master Key的内容。\nVercel 部署 (服务端) 部署地址：vercel Deploy 如果你未登录的话，Vercel 会让你注册或登录，请使用 GitHub 账户进行快捷登录。\n在右侧Private Repository Name位置输入仓库名，我这里输入liuyan，点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n注意：waline和你的博客在vercel是两个独立的hugo项目\n点击Continue to Dashboard进入管理页面，对应项目Domains下面的liuyan-ochre.vercel.app就是自动分配的访问网址域名，点击可以直接进入留言区\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，Key处填写LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY ，它们的值分别对应上一步在 LeanCloud 中获得的 APP ID, APP KEY, Master Key，Value处填写对应的内容，最后点击save\n引入博客 stack主题 登录vercel，点击右上角头像，点击Dashboard，复制Domains下面自动分配网址域名\n进入博客文件夹里的D:xx\\themes\\stack\\layouts\\partials\\comments\\provider，确认有waline.html文件\n如果没有waline.html文件要自己创建：\n打开VScode，右上角新建文件，将下面的代码复制粘贴进去 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; Waline.init({ el: \u0026#39;#waline\u0026#39;, serverURL: \u0026#39;{{ site.Params.comments.waline.serverURL }}\u0026#39;, dark: \u0026#39;{{ site.Params.comments.waline.dark }}\u0026#39;, lang: \u0026#39;{{ site.Params.comments.waline.lang }}\u0026#39;, emoji: {{ site.Params.comments.waline.emoji | jsonify }}, }); \u0026lt;/script\u0026gt; 将文件另存为waline.html,保存地址为D:xx\\themes\\stack\\layouts\\partials\\comments\\provider 在博客文件夹中打开hugo.yaml，下拉到params\n找到comments:，将 provider:修改为 provider: waline\n找到waline:，将serverURL:修改为serverURL: https://你的留言项目域名.vercel.app，将lang:修改为lang: zh-CN\n保存并关闭\n测试能否正常运行：\n编辑好文件后，在博客所在文件夹的空白处单击右键（文件夹内必须有config.toml文件），选择Open Git Bash Here，在弹出的命令行界面中输入hugo server --disableFastRender，如果步骤正确，会显示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Watching for changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\{archetypes,content,th emes} Watching for config changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\hugo.yaml, D:\\b log\\github_wsw_hugo\\hugo\\hugo\\themes\\stack\\config.yaml Start building sites … hugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu ildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio WARN Search page not found. Create a page with layout: search. WARN Archives page not found. Create a page with layout: archives. | EN | ZH-CN | AR -------------------+----+-------+----- Pages | 47 | 18 | 21 Paginator pages | 6 | 0 | 0 Non-page files | 5 | 1 | 1 Static files | 0 | 0 | 0 Processed images | 14 | 0 | 0 Aliases | 22 | 7 | 9 Cleaned | 0 | 0 | 0 Built in 614 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 显示结果最后的http://localhost:1313 就是预览网址\n推送到Github 打开Github Desktop，登录Github账号\n点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送\n评论管理 部署完成后，请访问你的域名进行注册。首个注册的人会被设定成管理员。 管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。 用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。 ","date":"2025-04-02T00:00:00Z","image":"https://chatstorage.dvd.moe/dvdchat/dvdchat/44e51c87-6651-441d-8dc3-e188f9f30d8e.jpg","permalink":"http://localhost:1313/p/%E9%85%8D%E7%BD%AEwaline%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/","title":"配置waline添加留言功能"},{"content":"下载ffmpeg 下载地址：https://github.com/BtbN/FFmpeg-Builds/releases ，选择ffmpeg-master-latest-win64-gpl-shared.zip 版本\n安装ffmpeg 假设已经解压，进入文件夹并且点开bin文件夹，此时文件路径为D:\\rj\\ffmpeg\\ffmpeg\\bin，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车\n进入高级选项卡，点击环境变量\n在系统变量部分，找到Path变量，点击编辑\n在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里\n依次点确定关闭所有窗口\n测试是否成功：\n【win+R】打开命令提示符，输入cmd然后回车，在弹出的命令行界面中输入ffmpeg，如果步骤正确，会显示ffmpeg相关信息，比如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ffmpeg version 2024-10-27-git-bb57b78013-full_build-www.gyan.dev Copyright (c) 2000-2024 the FFmpeg developers built with gcc 14.2.0 (Rev1, Built by MSYS2 project) configuration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libaribcaption --enable-libdav1d --enable-libdavs2 --enable-libopenjpeg --enable-libquirc --enable-libuavs3d --enable-libxevd --enable-libzvbi --enable-libqrencode --enable-librav1e --enable-libsvtav1 --enable-libvvenc --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxeve --enable-libxvid --enable-libaom --enable-libjxl --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libharfbuzz --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-dxva2 --enable-d3d11va --enable-d3d12va --enable-ffnvcodec --enable-libvpl --enable-nvdec --enable-nvenc --enable-vaapi --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libcodec2 --enable-libilbc --enable-libgsm --enable-liblc3 --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint libavutil 59. 46.100 / 59. 46.100 libavcodec 61. 22.100 / 61. 22.100 libavformat 61. 9.100 / 61. 9.100 libavdevice 61. 4.100 / 61. 4.100 libavfilter 10. 6.100 / 10. 6.100 libswscale 8. 9.101 / 8. 9.101 libswresample 5. 4.100 / 5. 4.100 libpostproc 58. 4.100 / 58. 4.100 Universal media converter usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}... Use -h to get full help or, even better, run \u0026#39;man ffmpeg\u0026#39; 转换格式 假设我需要转换的文件名为gavv01.mkv，并且文件路径为D:\\resource\\gavv\n【win+R】打开命令提示符，输入cmd然后回车 输入cd D:\\resource\\gavv导航到gavv文件夹 单个转换：输入ffmpeg -i \u0026quot;gavv01.mkv\u0026quot; -c:v copy -c:a copy \u0026quot;gavv01.mp4\u0026quot;，按回车，其中gavv01.mkv是需要转换的文件，gavv01.mp4是转换后的文件 批量转换：输入for %i in (*.mkv) do ffmpeg -i \u0026quot;%i\u0026quot; -c:v copy -c:a copy \u0026quot;%~ni.mp4\u0026quot; 切换来源文件夹：输入cd D:新文件夹 如果显示文件错误：\n【win+R】打开命令提示符，输入cmd然后回车 输入D:，回车 输入cd \u0026quot;D:\\resource\\gavv\u0026quot;（双引号确保路径正确） 输入dir，回车，确认该文件夹中有需要转换的文件 ","date":"2025-04-02T00:00:00Z","image":"https://chatstorage.dvd.moe/dvdchat/dvdchat/dc679c68-35cd-4492-87cc-c3ba485219d7.jpg","permalink":"http://localhost:1313/p/%E4%BD%BF%E7%94%A8ffmpeg%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A0%E6%8D%9F%E8%BD%AC%E6%8D%A2/","title":"使用ffmpeg进行视频格式的无损转换"},{"content":" 感谢“小球飞鱼”的教程 ，以及在这个过程提供帮助的各位朋友。\n下载软件，注册账号 Hugo 下载地址：https://github.com/gohugoio/hugo/releases 打开链接后往下拉，找到Assets，下载最新的带extended的版本，或者直接点hugo_extended_0.145.0_windows-amd64.zip 下载\n下载后解压到解压博客文件夹在的位置，比如说，我在D盘建了一个blog文件，那么解压后的hugo文件夹就要移动到这个blog文件夹里（后文举例都用这个）\nGit 下载地址：https://git-scm.com 打开链接后点击Download for Windows，下载64-bit Git for Windows Setup，或者直接点Git-2.49.0-64-bit.exe 下载\n下载后安装，安装路径随意，一直点下一步直到安装成功\nGithub账号 注册网址：https://github.com 最好用谷歌邮箱，或者别的国外邮箱\nGithub Desktop 下载地址：https://github.com/apps/desktop VScode 下载地址：https://code.visualstudio.com 下载后点击左下角设置，再点击Extensions（扩展），搜索Chinese Language Pack for Visual Studio Code（汉化） 和Markdown All in One插件，点击install安装\n汉化插件启动：快捷键【Ctrl+Shift+P】打开命令搜索框，输入【configure language】,点击【Display language】这行，点击【中文（简体）】这行，在弹出框中点【Restart】重启VScode\n安装HUGO Hugo.exe放在D盘的blog文件中，可以从文件上方看到文件路径为D:\\blog\\hugo_extended_0.145.0_windows-amd64，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车 进入高级选项卡，点击环境变量 在系统变量部分，找到Path变量，点击编辑 在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里 依次点确定关闭所有窗口 测试是否成功：（命令窗口复制粘贴只能右键，不能用快捷键）\n在D:\\blog中任意空白处右键，点击Open Git Bash Here，在弹出的命令行界面中输入hugo version，如果步骤正确，会显示：\n1 hugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio 显示结果中的0.145.0是hugo的版本号，后面需要用\n搭建博客 注册Verce：https://vercel.com ，点击右上角Sign Up，选择 I'm working on personal projects（hobby），给自己取个名字，再点击Continue\n选择使用Github账号注册，登录前面注册的github账号，弹出授权窗口时，点击Authorize Vercel\n在Let\u0026rsquo;s build something new页面，点击右边Clone Template项目下方的Browse All Templates，左边搜索栏输入hugo，会出现Hugo Starter项目，点开\n如果没有看到这个界面，点击右上角头像，点击Dashboard，点击右上角黑色的Add New project\n点击左边Deploy，点击Git Scope的下拉列表，点击Add GitHub Org or Account，弹出安装窗口，点击Install\n在Git Scope下拉列表中点击你的Github账户，在右侧Private Repository Name位置输入仓库名，我这里输入donbro（这个名字很重要！它决定了博客的域名！），点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n点击Continue to Dashboard进入管理页面，Domains下面的donbro.vercel.app就是自动分配的访问网址域名，点击可以直接进入博客\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，key处填写HUGO_VERSION，Value处填写版本号(上面写了怎么查)，最后点击save\n推送到Github 这个博客更新的顺序是，你在本地新建一篇md文件，然后通过github Desktop同步更新到Github，然后再更新到你的博客域名\n在D盘的blog文件夹中新建一个名为donbro 的空文件夹，这里特意和vercel的项目同名是为了方便自己看 打开Github Desktop，登录Github账号，选择Clone a repository from the internet…（也就是把刚刚在vercel建立的项目克隆到github） 跳出的Clone a repository弹框中，注意下面的Local path，这里要点击左边的choose选择刚刚新建的donbro空文件夹 点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送 登录github网页，点击右上角头像，选择Your repositories，点击donbro仓库，左边是更新记录和文件，右边可以看到一个蓝色链接donbro.vercel.app ，点击就可以进入博客，也可以从vercel项目中进入 如果你想在同步到github之前预览效果：\n编辑好文件后，在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo server，如果步骤正确，会显示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Watching for changes in D:\\blog\\github_wsw_hugo\\donbro\\{archetypes,content,theme s} Watching for config changes in D:\\blog\\github_wsw_hugo\\donbro\\config.toml Start building sites … hugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu ildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio | ZH-CN -------------------+-------- Pages | 11 Paginator pages | 0 Non-page files | 0 Static files | 11 Processed images | 0 Aliases | 0 Cleaned | 0 Built in 110 ms Environment: \u0026#34;development\u0026#34; Serving pages from disk Running in Fast Render Mode. For full rebuilds on change: hugo server --disableF astRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 显示结果最后的http://localhost:1313 就是预览网址\n新建文章 在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo new posts/文章名字.md，回车后，hugo会在D:\\blog\\github_wsw_hugo\\donbro\\content\\posts文件夹中创建一个新的md文件，用Markdown编辑器（比如Tyopa）打开后，就可以写文章了\n文章属性模板：用以指定文章的标题、分类、Tag、是否为草稿、是否隐藏等属性。\n打开D:\\blog\\github_wsw_hugo\\donbro\\content\\posts\\archetypes文件夹下的default.md文件，将下面的代码粘贴进去，不需要的属性可以自由删除（【】内是解释，请自行删除）\n1 2 3 4 5 6 7 8 9 10 --- title: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34;【用git新建文章会自动填写】 author: \u0026#34;\u0026#34;【作者，建议填入本人名字默认】 description: \u0026#34;\u0026#34;【描述】 date: {{ .Date }}【自动填写建立时间】 categories: [\u0026#34;\u0026#34;]【分类】 tags: [\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]【标签】 draft: 【是否为草稿，可以填false/ture默认，或者每次新建文件自行填写】 hidden: 【是否隐藏，可以填false/ture默认，或者每次新建文件自行填写】 --- 提示：单击右键，选择Open Git Bash Here，然后在git中输入命令的前提是，右键时文件夹内必须有config.toml文件。\n安装主题 其实这篇流水账记录到上面就已经结束了，剩下的是更复杂的花里胡哨部分~\n在此附上Hugo主题下载网址：https://themes.gohugo.io/ ，大（剩）家（下）自（的）由（我）发（不）挥（会）吧（了）！\n","date":"2025-04-02T01:00:56+08:00","image":"https://chatstorage.dvd.moe/dvdchat/dvdchat/8114f986-0e3a-4b7d-b8fc-65865cd5f636.jpg","permalink":"http://localhost:1313/p/hugo-%E5%B0%8F%E7%99%BD%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","title":"Hugo-小白博客部署记录"}]