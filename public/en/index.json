


[{"content":"","date":"2025年4月3日","externalUrl":null,"permalink":"/posts/blog%E7%BB%B4%E6%8A%A4%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/","section":"Posts","summary":"","title":"blog维护更新记录","type":"posts"},{"content":"","date":"2025年4月3日","externalUrl":null,"permalink":"/zh-cn/posts/blog%E7%BB%B4%E6%8A%A4%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/","section":"早上中午晚上好~","summary":"","title":"blog维护更新记录","type":"zh-cn"},{"content":"","date":"2025年4月3日","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2025年4月3日","externalUrl":null,"permalink":"/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/","section":"Categories","summary":"","title":"未分类","type":"categories"},{"content":"","date":"2025年4月2日","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":" 基础设置 # baseurl: https://hugo-one-green.vercel.app/ // 博客地址\rlanguageCode: zh-CN //语言改成中文\rtheme: stack //主题文件夹同名\rtitle: 长眠动物的白天 //博客主题？\rcopyright: wsw //页脚的网站版权声明，写自己，也可以留空，更多自定义可以修改layouts/partials/footer.html 默认语言、优化中日韩语 # # Theme i18n support\r# Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw //可以选择的语言\rDefaultContentLanguage: zh-cn //默认语言，改成简体中文\r# Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] // 中日韩语下面要改成ture\r# This will make .Summary and .WordCount behave correctly for CJK languages.// 为了让摘要和字数统计正常运行\rhasCJKLanguage: ture //改这里 hugo站点多语言设置 # languages: en:\rlanguageName: English\rtitle: Example Site\rweight: 3 params:\rsidebar:\rsubtitle: Example description\rzh-cn:\rlanguageName: 中文（简体）\rtitle: 长眠动物的白天\rweight: 1 //权重，权重越小优先级越高，排在更前面\rparams:\rsidebar: //侧边栏\rsubtitle: 不作诗则做诗 //描述\rar: //阿拉伯语，不需要这个所以我会删掉\rlanguageName: عربي\rlanguagedirection: rtl\rtitle: موقع تجريبي\rweight: params:\rsidebar:\rsubtitle: وصف تجريبي\rzh-tw: //繁体中文，我自己加上的 languageName: 中文（繁体）\rtitle: 長眠動物的白天\rweight: 2\rparams:\rsidebar:\rsubtitle: 不作詩則做詩 第三方服务，目前包含评论系统和谷歌分析（已经单独记录怎么配置waline评论，所以这段跳过） # services: # Change it to your Disqus shortname before using\rdisqus:\rshortname: \u0026#34;hugo-theme-stack\u0026#34;\r# GA Tracking ID\rgoogleAnalytics:\rid: 文章分页和永久链接 # pagination: //每页显示几个分页链接，比如1 2 3 … 10\rpagerSize: 3\rpermalinks: //slug是文章别名，可以在属性中设置\rpost: /p/:slug/ //生成文章网址http://博客名.com/p/别名/，p可以随意替换，比如改成page\rpage: /:slug/ //生成独立页面网址http://博客名.com/别名/ params //主题配置自定义参数 # 文章分类、特色图片、RSS、站点图标、页脚信息 # mainSections: //主页展示的主要内容分类\r- post //主页显示post目录下的文章\r- new //可以自己加，这是举个例子，这样主页就会显示这两个目录\rfeaturedImageField: image //\rrssFullContent: true //订阅RSS的用户可以看到全文，改成false则只显示摘要，需访问网站才能阅读全文\rfavicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) //网站图标，要把favicon.ico文件放到static/目录下，如果图片是png那这里也要改\rfooter: //页脚\rsince: 2025 //网站的起始年份，改成博客创建年份\rcustomText: 早上中午晚上好~ //自定义文本，可以留空 日期格式、侧边栏、文章 # dateFormat: //日期格式\rpublished: Jan 02, 2006 //文章发布日期\rlastUpdated: Jan 02, 2006 15:04 MST //最后更新日期\rsidebar: //侧边栏\remoji: 🦊 //侧边栏顶部表情，表情符号列表：getemoji.com\rsubtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. //副标题，可以自定义替换\ravatar: //头像\renabled: true //是否启用，false表示不启用\rlocal: true // 是否使用本地储存图片\rsrc: img/avatar.png //图片路径\rarticle: //文章\rmath: false //是否启用数学公式支持\rtoc: true // 是否启用文章目录\rreadingTime: true //是否显示阅读时间（根据字数估算）\rlicense: //文章版权信息\renabled: true //是否启用\rdefault: Licensed under CC BY-NC-SA 4.0 //默认的版权许可协议 comments //评论 # 多个评论系统的集成配置展示 //未启用，跳过 # enabled: true //是否启用评论功能\rprovider: waline //评论系统，这里是自己选的waline\rdisqusjs: //未启用\rshortname:\rapiUrl:\rapiKey:\radmin:\radminLabel:\rutterances: //未启用\rrepo:\rissueTerm: pathname\rlabel:\rbeaudar: //未启用\rrepo:\rissueTerm: pathname\rlabel:\rtheme:\rremark42: //未启用\rhost:\rsite:\rlocale:\rvssue: //未启用\rplatform:\rowner:\rrepo:\rclientId:\rclientSecret:\rautoCreateIssue: false waline评论系统的设置 # # Waline client configuration see: https://waline.js.org/en/reference/component.html //网站指路\rwaline:\rserverURL: https://liuyan-ochre.vercel.app //服务端的url，自己部署的\rlang: zh-CN //语言\rpageview: ture //查看计数功能，可以留空不启用\remoji: //表情包\r- https://unpkg.com/@waline/emojis@1.0.1/weibo //一个微博表情包链接\rrequiredMeta: //评论是需要的元数据，用户必须提供的\r- name //姓名\r- email //电子邮件\r- url //个人网站链接\rlocale:\radmin: 博主\rplaceholder:你好~ //评论区占位符文本，可留空 多种评论系统的配置 # twikoo: //未启用\renvId:\rregion:\rpath:\rlang:\r# See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options\rcactus: //未启用\rdefaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34;\rserverName: \u0026#34;cactus.chat\u0026#34;\rsiteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site)\rgiscus: //未启用\rrepo:\rrepoID:\rcategory:\rcategoryID:\rmapping:\rlightTheme:\rdarkTheme:\rreactionsEnabled: 1\remitMetadata: 0\rgitalk: //未启用\rowner:\radmin:\rrepo:\rclientID:\rclientSecret:\rproxy:\rcusdis: //未启用\rhost:\rid: 小部件配置 # widgets: //小部件\rhomepage: //首页\r- type: search //搜索框\r- type: archives //归档 准备改名文章并保留左边，所以这里我会删除\rparams:\rlimit: 5 //最多显示5个项目\r- type: categories //分类 这个也准备保留左边，删除\rparams:\rlimit: 10 //最多显示10个项目\r- type: tag-cloud //标签云 保留左边，删除\rparams:\rlimit: 10 //最多显示10个项目\rpage: //文章\r- type: toc //文章页面显示目录 自定义在Twitter等平台分享博客链接时的显示效果 # opengraph:\rtwitter:\r# Your Twitter username\rsite: //用户名，填写格式为@name\r# Available values: summary, summary_large_image\rcard: summary_large_image //卡片类型，这里是包含大图的摘要卡片\rdefaultImage:\ropengraph:\renabled: false //是否开启Open Graph图片功能\rlocal: false //是否使用本地图片\rsrc: //如果启用，在这里放图片源链接 颜色模式切换、主题优化图片 # colorScheme: //颜色模式\r# Display toggle\rtoggle: true //启用切换\r# Available values: auto, light, dark\rdefault: auto //根据操作系统调整\rimageProcessing: //主题能否处理封面、文章中的1图片\rcover: //封面\renabled: true\rcontent: //文章内容\renabled: true menu # ### Custom menu\r### See https://stack.jimmycai.com/config/menu\r### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter //从菜单中移除about、archive和search：在FrontMatter中删除对应的menu：main字段\rmenu:\rmain: [] //主要导航菜单\rsocial: //社交媒体菜单\r- identifier: github //identifier是标识符\rname: GitHub //鼠标移动到图标上时显示的文本\rurl: https://github.com/wbzddwsw/hugo //点击跳转到这里\rparams:\ricon: brand-github //图标名称\rweight: 1 //权重，数字越小排越前面，这是自己加的\r- identifier: twitter\rname: Twitter\rurl: https://twitter.com\rparams:\ricon: brand-twitter\rweight: 2 - identifier: stelpolva //星屑主页，自己加的\rname: stelpolva\rurl: https://stelpolva.moe/@donbro\rparams:\ricon: \u0026#34;star-regular\u0026#34;\rweight: 3 怎么给链接改图标，以及为新建链接添加图标：（这里只记录最简单的方法）\n打开https://fontawesome.com，点击上方第三个Icons，进入图标页 输入你想要的图标的关键词，比如我这里输入star，点开想要的图标 弹出框右上角有个下载图标，是Download SVG File，点击下载 将下载好的SVG文件移动到博客文件夹下的xx\\themes\\stack\\assets\\icons 复制这个SVG文件名，粘贴到上面的对应的**icon: **后面（英文冒号+空格） 相关文章推荐 # related:\rincludeNewer: true //是否包含比当前文章更新的内容\rthreshold: 60 //最低相关度得分\rtoLower: true //ture忽略大小写，false严格区分大小写\rindices:\r- name: tags\rweight: 100 //标签匹配权重\r- name: categories\rweight: 200 //分类匹配权重，权重越高越容易被推荐\r- name: name //还可以自己增加按名字相似度推荐等\rweight: 200 markdown解析器设置 # markup:\rgoldmark:\rextensions:\rpassthrough:\renable: true //开启特殊标记的直通功能\rdelimiters:\rblock:\r- - \\[\r- \\] //允许 `$begin:math:display$ ... $end:math:display$` 作为数学公式的块级分隔符\r- - $$\r- $$ //允许 `$$ ... $$` 作为数学公式的块级分隔符\rinline:\r- - \\(\r- \\) //允许 `$begin:math:text$ ... $end:math:text$` 作为数学公式的行内分隔符\rrenderer:\r## Set to true if you have HTML content inside Markdown\runsafe: true //允许使用html代码\rtableOfContents: //目录设置\rendLevel: 6 //目录包含的最大级别\rordered: true //是否使用有序列表\rstartLevel: 1 //目录起始标题级别\rhighlight: //代码高亮\rnoClasses: false //使用CSS类\rcodeFences: true //使用markdown代码块\rguessSyntax: true //自动检测代码语言\rlineNoStart: 1 //行号从1开始\rlineNos: true //启用行号\rlineNumbersInTable: true //行号放在表格里\rtabWidth: 4 //Tab键的宽度 ","date":"2025年4月2日","externalUrl":null,"permalink":"/posts/hugo-stack%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","section":"Posts","summary":"","title":"Hugo-stack主题修改学习记录","type":"posts"},{"content":" 基础设置 # baseurl: https://hugo-one-green.vercel.app/ // 博客地址\rlanguageCode: zh-CN //语言改成中文\rtheme: stack //主题文件夹同名\rtitle: 长眠动物的白天 //博客主题？\rcopyright: wsw //页脚的网站版权声明，写自己，也可以留空，更多自定义可以修改layouts/partials/footer.html 默认语言、优化中日韩语 # # Theme i18n support\r# Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw //可以选择的语言\rDefaultContentLanguage: zh-cn //默认语言，改成简体中文\r# Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] // 中日韩语下面要改成ture\r# This will make .Summary and .WordCount behave correctly for CJK languages.// 为了让摘要和字数统计正常运行\rhasCJKLanguage: ture //改这里 hugo站点多语言设置 # languages: en:\rlanguageName: English\rtitle: Example Site\rweight: 3 params:\rsidebar:\rsubtitle: Example description\rzh-cn:\rlanguageName: 中文（简体）\rtitle: 长眠动物的白天\rweight: 1 //权重，权重越小优先级越高，排在更前面\rparams:\rsidebar: //侧边栏\rsubtitle: 不作诗则做诗 //描述\rar: //阿拉伯语，不需要这个所以我会删掉\rlanguageName: عربي\rlanguagedirection: rtl\rtitle: موقع تجريبي\rweight: params:\rsidebar:\rsubtitle: وصف تجريبي\rzh-tw: //繁体中文，我自己加上的 languageName: 中文（繁体）\rtitle: 長眠動物的白天\rweight: 2\rparams:\rsidebar:\rsubtitle: 不作詩則做詩 第三方服务，目前包含评论系统和谷歌分析（已经单独记录怎么配置waline评论，所以这段跳过） # services: # Change it to your Disqus shortname before using\rdisqus:\rshortname: \u0026#34;hugo-theme-stack\u0026#34;\r# GA Tracking ID\rgoogleAnalytics:\rid: 文章分页和永久链接 # pagination: //每页显示几个分页链接，比如1 2 3 … 10\rpagerSize: 3\rpermalinks: //slug是文章别名，可以在属性中设置\rpost: /p/:slug/ //生成文章网址http://博客名.com/p/别名/，p可以随意替换，比如改成page\rpage: /:slug/ //生成独立页面网址http://博客名.com/别名/ params //主题配置自定义参数 # 文章分类、特色图片、RSS、站点图标、页脚信息 # mainSections: //主页展示的主要内容分类\r- post //主页显示post目录下的文章\r- new //可以自己加，这是举个例子，这样主页就会显示这两个目录\rfeaturedImageField: image //\rrssFullContent: true //订阅RSS的用户可以看到全文，改成false则只显示摘要，需访问网站才能阅读全文\rfavicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) //网站图标，要把favicon.ico文件放到static/目录下，如果图片是png那这里也要改\rfooter: //页脚\rsince: 2025 //网站的起始年份，改成博客创建年份\rcustomText: 早上中午晚上好~ //自定义文本，可以留空 日期格式、侧边栏、文章 # dateFormat: //日期格式\rpublished: Jan 02, 2006 //文章发布日期\rlastUpdated: Jan 02, 2006 15:04 MST //最后更新日期\rsidebar: //侧边栏\remoji: 🦊 //侧边栏顶部表情，表情符号列表：getemoji.com\rsubtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. //副标题，可以自定义替换\ravatar: //头像\renabled: true //是否启用，false表示不启用\rlocal: true // 是否使用本地储存图片\rsrc: img/avatar.png //图片路径\rarticle: //文章\rmath: false //是否启用数学公式支持\rtoc: true // 是否启用文章目录\rreadingTime: true //是否显示阅读时间（根据字数估算）\rlicense: //文章版权信息\renabled: true //是否启用\rdefault: Licensed under CC BY-NC-SA 4.0 //默认的版权许可协议 comments //评论 # 多个评论系统的集成配置展示 //未启用，跳过 # enabled: true //是否启用评论功能\rprovider: waline //评论系统，这里是自己选的waline\rdisqusjs: //未启用\rshortname:\rapiUrl:\rapiKey:\radmin:\radminLabel:\rutterances: //未启用\rrepo:\rissueTerm: pathname\rlabel:\rbeaudar: //未启用\rrepo:\rissueTerm: pathname\rlabel:\rtheme:\rremark42: //未启用\rhost:\rsite:\rlocale:\rvssue: //未启用\rplatform:\rowner:\rrepo:\rclientId:\rclientSecret:\rautoCreateIssue: false waline评论系统的设置 # # Waline client configuration see: https://waline.js.org/en/reference/component.html //网站指路\rwaline:\rserverURL: https://liuyan-ochre.vercel.app //服务端的url，自己部署的\rlang: zh-CN //语言\rpageview: ture //查看计数功能，可以留空不启用\remoji: //表情包\r- https://unpkg.com/@waline/emojis@1.0.1/weibo //一个微博表情包链接\rrequiredMeta: //评论是需要的元数据，用户必须提供的\r- name //姓名\r- email //电子邮件\r- url //个人网站链接\rlocale:\radmin: 博主\rplaceholder:你好~ //评论区占位符文本，可留空 多种评论系统的配置 # twikoo: //未启用\renvId:\rregion:\rpath:\rlang:\r# See https://cactus.chat/docs/reference/web-client/#configuration for description of the various options\rcactus: //未启用\rdefaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34;\rserverName: \u0026#34;cactus.chat\u0026#34;\rsiteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site)\rgiscus: //未启用\rrepo:\rrepoID:\rcategory:\rcategoryID:\rmapping:\rlightTheme:\rdarkTheme:\rreactionsEnabled: 1\remitMetadata: 0\rgitalk: //未启用\rowner:\radmin:\rrepo:\rclientID:\rclientSecret:\rproxy:\rcusdis: //未启用\rhost:\rid: 小部件配置 # widgets: //小部件\rhomepage: //首页\r- type: search //搜索框\r- type: archives //归档 准备改名文章并保留左边，所以这里我会删除\rparams:\rlimit: 5 //最多显示5个项目\r- type: categories //分类 这个也准备保留左边，删除\rparams:\rlimit: 10 //最多显示10个项目\r- type: tag-cloud //标签云 保留左边，删除\rparams:\rlimit: 10 //最多显示10个项目\rpage: //文章\r- type: toc //文章页面显示目录 自定义在Twitter等平台分享博客链接时的显示效果 # opengraph:\rtwitter:\r# Your Twitter username\rsite: //用户名，填写格式为@name\r# Available values: summary, summary_large_image\rcard: summary_large_image //卡片类型，这里是包含大图的摘要卡片\rdefaultImage:\ropengraph:\renabled: false //是否开启Open Graph图片功能\rlocal: false //是否使用本地图片\rsrc: //如果启用，在这里放图片源链接 颜色模式切换、主题优化图片 # colorScheme: //颜色模式\r# Display toggle\rtoggle: true //启用切换\r# Available values: auto, light, dark\rdefault: auto //根据操作系统调整\rimageProcessing: //主题能否处理封面、文章中的1图片\rcover: //封面\renabled: true\rcontent: //文章内容\renabled: true menu # ### Custom menu\r### See https://stack.jimmycai.com/config/menu\r### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter //从菜单中移除about、archive和search：在FrontMatter中删除对应的menu：main字段\rmenu:\rmain: [] //主要导航菜单\rsocial: //社交媒体菜单\r- identifier: github //identifier是标识符\rname: GitHub //鼠标移动到图标上时显示的文本\rurl: https://github.com/wbzddwsw/hugo //点击跳转到这里\rparams:\ricon: brand-github //图标名称\rweight: 1 //权重，数字越小排越前面，这是自己加的\r- identifier: twitter\rname: Twitter\rurl: https://twitter.com\rparams:\ricon: brand-twitter\rweight: 2 - identifier: stelpolva //星屑主页，自己加的\rname: stelpolva\rurl: https://stelpolva.moe/@donbro\rparams:\ricon: \u0026#34;star-regular\u0026#34;\rweight: 3 怎么给链接改图标，以及为新建链接添加图标：（这里只记录最简单的方法）\n打开https://fontawesome.com，点击上方第三个Icons，进入图标页 输入你想要的图标的关键词，比如我这里输入star，点开想要的图标 弹出框右上角有个下载图标，是Download SVG File，点击下载 将下载好的SVG文件移动到博客文件夹下的xx\\themes\\stack\\assets\\icons 复制这个SVG文件名，粘贴到上面的对应的**icon: **后面（英文冒号+空格） 相关文章推荐 # related:\rincludeNewer: true //是否包含比当前文章更新的内容\rthreshold: 60 //最低相关度得分\rtoLower: true //ture忽略大小写，false严格区分大小写\rindices:\r- name: tags\rweight: 100 //标签匹配权重\r- name: categories\rweight: 200 //分类匹配权重，权重越高越容易被推荐\r- name: name //还可以自己增加按名字相似度推荐等\rweight: 200 markdown解析器设置 # markup:\rgoldmark:\rextensions:\rpassthrough:\renable: true //开启特殊标记的直通功能\rdelimiters:\rblock:\r- - \\[\r- \\] //允许 `$begin:math:display$ ... $end:math:display$` 作为数学公式的块级分隔符\r- - $$\r- $$ //允许 `$$ ... $$` 作为数学公式的块级分隔符\rinline:\r- - \\(\r- \\) //允许 `$begin:math:text$ ... $end:math:text$` 作为数学公式的行内分隔符\rrenderer:\r## Set to true if you have HTML content inside Markdown\runsafe: true //允许使用html代码\rtableOfContents: //目录设置\rendLevel: 6 //目录包含的最大级别\rordered: true //是否使用有序列表\rstartLevel: 1 //目录起始标题级别\rhighlight: //代码高亮\rnoClasses: false //使用CSS类\rcodeFences: true //使用markdown代码块\rguessSyntax: true //自动检测代码语言\rlineNoStart: 1 //行号从1开始\rlineNos: true //启用行号\rlineNumbersInTable: true //行号放在表格里\rtabWidth: 4 //Tab键的宽度 ","date":"2025年4月2日","externalUrl":null,"permalink":"/zh-cn/posts/hugo-stack%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","section":"早上中午晚上好~","summary":"","title":"Hugo-stack主题修改学习记录","type":"zh-cn"},{"content":"","date":"2025年4月2日","externalUrl":null,"permalink":"/tags/stack/","section":"Tags","summary":"","title":"Stack","type":"tags"},{"content":"","date":"2025年4月2日","externalUrl":null,"permalink":"/categories/%E5%8D%9A%E5%AE%A2%E5%AD%A6%E4%B9%A0/","section":"Categories","summary":"","title":"博客学习","type":"categories"},{"content":" 注册LeanCloud # 注册地址：https://console.leancloud.app/register（国际版）（如果是自己网页搜索的，注意必须注册国际版）\n进入控制台，点击左上角创建应用并起一个名字 ，这里必须选免费的开发版\n进入应用，点击项目左下角设置，再选择左下角的 设置、应用凭证，记录App ID、App Key和Master Key的内容。\nVercel 部署 (服务端) # 如果已有账号请直接从第三步开始\n注册Verce：https://vercel.com，点击右上角Sign Up，选择 I'm working on personal projects（hobby），给自己取个名字，再点击Continue\n选择使用Github账号注册，登录前面注册的github账号，弹出授权窗口时，点击Authorize Vercel\n在Let\u0026rsquo;s build something new页面，点击右边Clone Template项目下方的Browse All Templates，左边搜索栏输入hugo，会出现Hugo Starter项目，点开\n如果没有看到这个界面，点击右上角头像，点击Dashboard，点击右上角黑色的Add New project\n点击左边Deploy，点击Git Scope的下拉列表，点击Add GitHub Org or Account，弹出安装窗口，点击Install\n在Git Scope下拉列表中点击你的Github账户，在右侧Private Repository Name位置输入仓库名，我这里输入liuyan，点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n点击Continue to Dashboard进入管理页面，对应项目Domains下面的liuyan-ochre.vercel.app就是自动分配的访问网址域名，点击可以直接进入留言区\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，Value处填写App ID、App Key和Master Key版本号，key处填写对应的内容，最后点击save\n引入博客 # 登录vercel，点击右上角头像，点击Dashboard，复制Domains下面自动分配网址域名\n进入博客文件夹里的D:xx\\themes\\stack\\layouts\\partials\\comments\\provider，确认有waline.html文件\n如果没有waline.html文件要自己创建：\n打开VScode，右上角新建文件，将下面的代码复制粘贴进去 \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rWaline.init({\rel: \u0026#39;#waline\u0026#39;,\rserverURL: \u0026#39;{{ site.Params.comments.waline.serverURL }}\u0026#39;,\rdark: \u0026#39;{{ site.Params.comments.waline.dark }}\u0026#39;,\rlang: \u0026#39;{{ site.Params.comments.waline.lang }}\u0026#39;,\remoji: {{ site.Params.comments.waline.emoji | jsonify }}, });\r\u0026lt;/script\u0026gt; 将文件另存为waline.html,保存地址为D:xx\\themes\\stack\\layouts\\partials\\comments\\provider 在博客文件夹中打开hugo.yaml，下拉到params\n找到comments:，将 provider:修改为 provider: waline\n找到waline:，将serverURL:修改为serverURL: https://你的留言项目域名.vercel.app，将lang:修改为lang: zh-CN\n保存并关闭\n测试能否正常运行：\n编辑好文件后，在博客所在文件夹的空白处单击右键（文件夹内必须有config.toml文件），选择Open Git Bash Here，在弹出的命令行界面中输入hugo server --disableFastRender，如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\{archetypes,content,th\remes}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\hugo.yaml, D:\\b\rlog\\github_wsw_hugo\\hugo\\hugo\\themes\\stack\\config.yaml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\rWARN Search page not found. Create a page with layout: search.\rWARN Archives page not found. Create a page with layout: archives.\r| EN | ZH-CN | AR\r-------------------+----+-------+-----\rPages | 47 | 18 | 21\rPaginator pages | 6 | 0 | 0\rNon-page files | 5 | 1 | 1\rStatic files | 0 | 0 | 0\rProcessed images | 14 | 0 | 0\rAliases | 22 | 7 | 9\rCleaned | 0 | 0 | 0\rBuilt in 614 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的http://localhost:1313就是预览网址\n推送到Github # 打开Github Desktop，登录Github账号\n点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送\n评论管理 # 部署完成后，请访问你的域名进行注册。首个注册的人会被设定成管理员。 管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。 用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。 ","date":"2025年4月2日","externalUrl":null,"permalink":"/posts/hugo-%E7%94%A8waline%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/","section":"Posts","summary":"","title":"Hugo-用waline添加留言功能","type":"posts"},{"content":" 注册LeanCloud # 注册地址：https://console.leancloud.app/register（国际版）（如果是自己网页搜索的，注意必须注册国际版）\n进入控制台，点击左上角创建应用并起一个名字 ，这里必须选免费的开发版\n进入应用，点击项目左下角设置，再选择左下角的 设置、应用凭证，记录App ID、App Key和Master Key的内容。\nVercel 部署 (服务端) # 如果已有账号请直接从第三步开始\n注册Verce：https://vercel.com，点击右上角Sign Up，选择 I'm working on personal projects（hobby），给自己取个名字，再点击Continue\n选择使用Github账号注册，登录前面注册的github账号，弹出授权窗口时，点击Authorize Vercel\n在Let\u0026rsquo;s build something new页面，点击右边Clone Template项目下方的Browse All Templates，左边搜索栏输入hugo，会出现Hugo Starter项目，点开\n如果没有看到这个界面，点击右上角头像，点击Dashboard，点击右上角黑色的Add New project\n点击左边Deploy，点击Git Scope的下拉列表，点击Add GitHub Org or Account，弹出安装窗口，点击Install\n在Git Scope下拉列表中点击你的Github账户，在右侧Private Repository Name位置输入仓库名，我这里输入liuyan，点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n点击Continue to Dashboard进入管理页面，对应项目Domains下面的liuyan-ochre.vercel.app就是自动分配的访问网址域名，点击可以直接进入留言区\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，Value处填写App ID、App Key和Master Key版本号，key处填写对应的内容，最后点击save\n引入博客 # 登录vercel，点击右上角头像，点击Dashboard，复制Domains下面自动分配网址域名\n进入博客文件夹里的D:xx\\themes\\stack\\layouts\\partials\\comments\\provider，确认有waline.html文件\n如果没有waline.html文件要自己创建：\n打开VScode，右上角新建文件，将下面的代码复制粘贴进去 \u0026lt;div id=\u0026#34;waline\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/@waline/client\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rWaline.init({\rel: \u0026#39;#waline\u0026#39;,\rserverURL: \u0026#39;{{ site.Params.comments.waline.serverURL }}\u0026#39;,\rdark: \u0026#39;{{ site.Params.comments.waline.dark }}\u0026#39;,\rlang: \u0026#39;{{ site.Params.comments.waline.lang }}\u0026#39;,\remoji: {{ site.Params.comments.waline.emoji | jsonify }}, });\r\u0026lt;/script\u0026gt; 将文件另存为waline.html,保存地址为D:xx\\themes\\stack\\layouts\\partials\\comments\\provider 在博客文件夹中打开hugo.yaml，下拉到params\n找到comments:，将 provider:修改为 provider: waline\n找到waline:，将serverURL:修改为serverURL: https://你的留言项目域名.vercel.app，将lang:修改为lang: zh-CN\n保存并关闭\n测试能否正常运行：\n编辑好文件后，在博客所在文件夹的空白处单击右键（文件夹内必须有config.toml文件），选择Open Git Bash Here，在弹出的命令行界面中输入hugo server --disableFastRender，如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\{archetypes,content,th\remes}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\hugo.yaml, D:\\b\rlog\\github_wsw_hugo\\hugo\\hugo\\themes\\stack\\config.yaml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\rWARN Search page not found. Create a page with layout: search.\rWARN Archives page not found. Create a page with layout: archives.\r| EN | ZH-CN | AR\r-------------------+----+-------+-----\rPages | 47 | 18 | 21\rPaginator pages | 6 | 0 | 0\rNon-page files | 5 | 1 | 1\rStatic files | 0 | 0 | 0\rProcessed images | 14 | 0 | 0\rAliases | 22 | 7 | 9\rCleaned | 0 | 0 | 0\rBuilt in 614 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的http://localhost:1313就是预览网址\n推送到Github # 打开Github Desktop，登录Github账号\n点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送\n评论管理 # 部署完成后，请访问你的域名进行注册。首个注册的人会被设定成管理员。 管理员登陆后，即可看到评论管理界面。在这里可以修改、标记或删除评论。 用户也可通过评论框注册账号，登陆后会跳转到自己的档案页。 ","date":"2025年4月2日","externalUrl":null,"permalink":"/zh-cn/posts/hugo-%E7%94%A8waline%E6%B7%BB%E5%8A%A0%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/","section":"早上中午晚上好~","summary":"","title":"Hugo-用waline添加留言功能","type":"zh-cn"},{"content":" 非常感谢莱特雷-letere的教程，我这里只是自己的操作记录，便于日后有需要的时候回顾\n下载stack主题 # 下载地址：https://github.com/CaiJimmy/hugo-theme-stack/tags\n解压后将文件重命名为stack，并移动到**/themes**文件夹中\n将/stack/exampleSite中的Content和hugo.yaml复制到博客主文件夹中\n删除content/post/rich-content\n打开hugo.yaml，将theme内容修改为stack跟主题文件夹同名，保存退出\n测试能否正常运行:\n编辑好文件后，在博客所在文件夹的空白处单击右键（文件夹内必须有config.toml文件），选择Open Git Bash Here，在弹出的命令行界面中输入hugo server 如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\{archetypes,content,th\remes}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\hugo.yaml, D:\\b\rlog\\github_wsw_hugo\\hugo\\hugo\\themes\\stack\\config.yaml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\rWARN Search page not found. Create a page with layout: search.\rWARN Archives page not found. Create a page with layout: archives.\r| EN | ZH-CN | AR\r-------------------+----+-------+-----\rPages | 47 | 18 | 21\rPaginator pages | 6 | 0 | 0\rNon-page files | 5 | 1 | 1\rStatic files | 0 | 0 | 0\rProcessed images | 14 | 0 | 0\rAliases | 22 | 7 | 9\rCleaned | 0 | 0 | 0\rBuilt in 571 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableF\rastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的http://localhost:1313就是预览网址\n推送到Github # 打开Github Desktop，登录Github账号 点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送 ","date":"2025年4月2日","externalUrl":null,"permalink":"/posts/hugo-%E9%83%A8%E7%BD%B2stack%E4%B8%BB%E9%A2%98/","section":"Posts","summary":"","title":"Hugo-部署stack主题","type":"posts"},{"content":" 非常感谢莱特雷-letere的教程，我这里只是自己的操作记录，便于日后有需要的时候回顾\n下载stack主题 # 下载地址：https://github.com/CaiJimmy/hugo-theme-stack/tags\n解压后将文件重命名为stack，并移动到**/themes**文件夹中\n将/stack/exampleSite中的Content和hugo.yaml复制到博客主文件夹中\n删除content/post/rich-content\n打开hugo.yaml，将theme内容修改为stack跟主题文件夹同名，保存退出\n测试能否正常运行:\n编辑好文件后，在博客所在文件夹的空白处单击右键（文件夹内必须有config.toml文件），选择Open Git Bash Here，在弹出的命令行界面中输入hugo server 如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\{archetypes,content,th\remes}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\hugo\\hugo\\hugo.yaml, D:\\b\rlog\\github_wsw_hugo\\hugo\\hugo\\themes\\stack\\config.yaml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\rWARN Search page not found. Create a page with layout: search.\rWARN Archives page not found. Create a page with layout: archives.\r| EN | ZH-CN | AR\r-------------------+----+-------+-----\rPages | 47 | 18 | 21\rPaginator pages | 6 | 0 | 0\rNon-page files | 5 | 1 | 1\rStatic files | 0 | 0 | 0\rProcessed images | 14 | 0 | 0\rAliases | 22 | 7 | 9\rCleaned | 0 | 0 | 0\rBuilt in 571 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableF\rastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的http://localhost:1313就是预览网址\n推送到Github # 打开Github Desktop，登录Github账号 点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送 ","date":"2025年4月2日","externalUrl":null,"permalink":"/zh-cn/posts/hugo-%E9%83%A8%E7%BD%B2stack%E4%B8%BB%E9%A2%98/","section":"早上中午晚上好~","summary":"","title":"Hugo-部署stack主题","type":"zh-cn"},{"content":" 下载ffmpeg # 下载地址：https://github.com/BtbN/FFmpeg-Builds/releases，选择**ffmpeg-master-latest-win64-gpl-shared.zip**版本\n安装ffmpeg # 假设已经解压，进入文件夹并且点开bin文件夹，此时文件路径为D:\\rj\\ffmpeg\\ffmpeg\\bin，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车\n进入高级选项卡，点击环境变量\n在系统变量部分，找到Path变量，点击编辑\n在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里\n依次点确定关闭所有窗口\n测试是否成功：\n【win+R】打开命令提示符，输入cmd然后回车，在弹出的命令行界面中输入ffmpeg，如果步骤正确，会显示ffmpeg相关信息，比如：\nffmpeg version 2024-10-27-git-bb57b78013-full_build-www.gyan.dev Copyright (c) 2000-2024 the FFmpeg developers\rbuilt with gcc 14.2.0 (Rev1, Built by MSYS2 project)\rconfiguration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libaribcaption --enable-libdav1d --enable-libdavs2 --enable-libopenjpeg --enable-libquirc --enable-libuavs3d --enable-libxevd --enable-libzvbi --enable-libqrencode --enable-librav1e --enable-libsvtav1 --enable-libvvenc --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxeve --enable-libxvid --enable-libaom --enable-libjxl --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libharfbuzz --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-dxva2 --enable-d3d11va --enable-d3d12va --enable-ffnvcodec --enable-libvpl --enable-nvdec --enable-nvenc --enable-vaapi --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libcodec2 --enable-libilbc --enable-libgsm --enable-liblc3 --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint\rlibavutil 59. 46.100 / 59. 46.100\rlibavcodec 61. 22.100 / 61. 22.100\rlibavformat 61. 9.100 / 61. 9.100\rlibavdevice 61. 4.100 / 61. 4.100\rlibavfilter 10. 6.100 / 10. 6.100\rlibswscale 8. 9.101 / 8. 9.101\rlibswresample 5. 4.100 / 5. 4.100\rlibpostproc 58. 4.100 / 58. 4.100\rUniversal media converter\rusage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\rUse -h to get full help or, even better, run \u0026#39;man ffmpeg\u0026#39; 转换格式 # 假设我需要转换的文件名为gavv01.mkv，并且文件路径为D:\\resource\\gavv\n【win+R】打开命令提示符，输入cmd然后回车 输入cd D:\\resource\\gavv导航到gavv文件夹 单个转换：输入ffmpeg -i \u0026quot;gavv01.mkv\u0026quot; -c:v copy -c:a copy \u0026quot;gavv01.mp4\u0026quot;，按回车，其中gavv01.mkv是需要转换的文件，gavv01.mp4是转换后的文件 批量转换：输入for %i in (*.mkv) do ffmpeg -i \u0026quot;%i\u0026quot; -c:v copy -c:a copy \u0026quot;%~ni.mp4\u0026quot; 切换来源文件夹：输入cd D:新文件夹 如果显示文件错误：\n【win+R】打开命令提示符，输入cmd然后回车 输入D:，回车 输入cd \u0026quot;D:\\resource\\gavv\u0026quot;（双引号确保路径正确） 输入dir，回车，确认该文件夹中有需要转换的文件 ","date":"2025年4月2日","externalUrl":null,"permalink":"/posts/%E4%BD%BF%E7%94%A8ffmpeg%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A0%E6%8D%9F%E8%BD%AC%E6%8D%A2/","section":"Posts","summary":"","title":"使用ffmpeg进行视频格式的无损转换","type":"posts"},{"content":" 下载ffmpeg # 下载地址：https://github.com/BtbN/FFmpeg-Builds/releases，选择**ffmpeg-master-latest-win64-gpl-shared.zip**版本\n安装ffmpeg # 假设已经解压，进入文件夹并且点开bin文件夹，此时文件路径为D:\\rj\\ffmpeg\\ffmpeg\\bin，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车\n进入高级选项卡，点击环境变量\n在系统变量部分，找到Path变量，点击编辑\n在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里\n依次点确定关闭所有窗口\n测试是否成功：\n【win+R】打开命令提示符，输入cmd然后回车，在弹出的命令行界面中输入ffmpeg，如果步骤正确，会显示ffmpeg相关信息，比如：\nffmpeg version 2024-10-27-git-bb57b78013-full_build-www.gyan.dev Copyright (c) 2000-2024 the FFmpeg developers\rbuilt with gcc 14.2.0 (Rev1, Built by MSYS2 project)\rconfiguration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libaribcaption --enable-libdav1d --enable-libdavs2 --enable-libopenjpeg --enable-libquirc --enable-libuavs3d --enable-libxevd --enable-libzvbi --enable-libqrencode --enable-librav1e --enable-libsvtav1 --enable-libvvenc --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxeve --enable-libxvid --enable-libaom --enable-libjxl --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-libharfbuzz --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-dxva2 --enable-d3d11va --enable-d3d12va --enable-ffnvcodec --enable-libvpl --enable-nvdec --enable-nvenc --enable-vaapi --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libcodec2 --enable-libilbc --enable-libgsm --enable-liblc3 --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint\rlibavutil 59. 46.100 / 59. 46.100\rlibavcodec 61. 22.100 / 61. 22.100\rlibavformat 61. 9.100 / 61. 9.100\rlibavdevice 61. 4.100 / 61. 4.100\rlibavfilter 10. 6.100 / 10. 6.100\rlibswscale 8. 9.101 / 8. 9.101\rlibswresample 5. 4.100 / 5. 4.100\rlibpostproc 58. 4.100 / 58. 4.100\rUniversal media converter\rusage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}...\rUse -h to get full help or, even better, run \u0026#39;man ffmpeg\u0026#39; 转换格式 # 假设我需要转换的文件名为gavv01.mkv，并且文件路径为D:\\resource\\gavv\n【win+R】打开命令提示符，输入cmd然后回车 输入cd D:\\resource\\gavv导航到gavv文件夹 单个转换：输入ffmpeg -i \u0026quot;gavv01.mkv\u0026quot; -c:v copy -c:a copy \u0026quot;gavv01.mp4\u0026quot;，按回车，其中gavv01.mkv是需要转换的文件，gavv01.mp4是转换后的文件 批量转换：输入for %i in (*.mkv) do ffmpeg -i \u0026quot;%i\u0026quot; -c:v copy -c:a copy \u0026quot;%~ni.mp4\u0026quot; 切换来源文件夹：输入cd D:新文件夹 如果显示文件错误：\n【win+R】打开命令提示符，输入cmd然后回车 输入D:，回车 输入cd \u0026quot;D:\\resource\\gavv\u0026quot;（双引号确保路径正确） 输入dir，回车，确认该文件夹中有需要转换的文件 ","date":"2025年4月2日","externalUrl":null,"permalink":"/zh-cn/posts/%E4%BD%BF%E7%94%A8ffmpeg%E8%BF%9B%E8%A1%8C%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%97%A0%E6%8D%9F%E8%BD%AC%E6%8D%A2/","section":"早上中午晚上好~","summary":"","title":"使用ffmpeg进行视频格式的无损转换","type":"zh-cn"},{"content":"","date":"2025年4月2日","externalUrl":null,"permalink":"/categories/%E7%94%B5%E8%84%91%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","section":"Categories","summary":"","title":"电脑使用技巧","type":"categories"},{"content":"","date":"2025年4月2日","externalUrl":null,"permalink":"/tags/%E8%BD%AF%E4%BB%B6%E6%93%8D%E4%BD%9C/","section":"Tags","summary":"","title":"软件操作","type":"tags"},{"content":" 感谢“小球飞鱼”的教程，以及在这个过程提供帮助的各位朋友\n本文仅作为方便自己以后回顾的的操作记录\n下载软件，注册账号 # Hugo 下载地址：https://github.com/gohugoio/hugo/releases\n打开链接后往下拉，找到Assets，下载最新的带extended的版本，或者直接点hugo_extended_0.145.0_windows-amd64.zip下载\n下载后解压到解压博客文件夹在的位置，比如说，我在D盘建了一个blog文件，那么解压后的hugo文件夹就要移动到这个blog文件夹里（后文举例都用这个）\nGit 下载地址：https://git-scm.com\n打开链接后点击Download for Windows，下载64-bit Git for Windows Setup，或者直接点Git-2.49.0-64-bit.exe下载\n下载后安装，安装路径随意，一直点下一步直到安装成功\nGithub账号 注册网址：https://github.com\n最好用谷歌邮箱，或者别的国外邮箱\nGithub Desktop 下载地址：https://github.com/apps/desktop\nVScode 下载地址：https://code.visualstudio.com\n下载后点击左下角设置，再点击Extensions（扩展），搜索Chinese Language Pack for Visual Studio Code（汉化） 和Markdown All in One插件，点击install安装\n汉化插件启动：快捷键【Ctrl+Shift+P】打开命令搜索框，输入【configure language】,点击【Display language】这行，点击【中文（简体）】这行，在弹出框中点【Restart】重启VScode\n安装HUGO # Hugo.exe放在D盘的blog文件中，可以从文件上方看到文件路径为D:\\blog\\hugo_extended_0.145.0_windows-amd64，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车 进入高级选项卡，点击环境变量 在系统变量部分，找到Path变量，点击编辑 在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里 依次点确定关闭所有窗口 测试是否成功：（命令窗口复制粘贴只能右键，不能用快捷键）\n在D:\\blog中任意空白处右键，点击Open Git Bash Here，在弹出的命令行界面中输入hugo version，如果步骤正确，会显示：\nhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio 显示结果中的0.145.0是hugo的版本号，后面需要用\n搭建博客 # 注册Verce：https://vercel.com，点击右上角Sign Up，选择 I'm working on personal projects（hobby），给自己取个名字，再点击Continue\n选择使用Github账号注册，登录前面注册的github账号，弹出授权窗口时，点击Authorize Vercel\n在Let\u0026rsquo;s build something new页面，点击右边Clone Template项目下方的Browse All Templates，左边搜索栏输入hugo，会出现Hugo Starter项目，点开\n如果没有看到这个界面，点击右上角头像，点击Dashboard，点击右上角黑色的Add New project\n点击左边Deploy，点击Git Scope的下拉列表，点击Add GitHub Org or Account，弹出安装窗口，点击Install\n在Git Scope下拉列表中点击你的Github账户，在右侧Private Repository Name位置输入仓库名，我这里输入donbro==（这个名字很重要！它决定了博客的域名！）==，点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n点击Continue to Dashboard进入管理页面，Domains下面的donbro.vercel.app就是自动分配的访问网址域名，点击可以直接进入博客\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，key处填写HUGO_VERSION，Value处填写版本号(上面写了怎么查)，最后点击save\n推送到Github # 这个博客更新的顺序是，你在本地新建一篇md文件，然后通过github Desktop同步更新到Github，然后再更新到你的博客域名\n在D盘的blog文件夹中新建一个名为donbro 的==空==文件夹，这里特意和vercel的项目同名是为了方便自己看 打开Github Desktop，登录Github账号，选择Clone a repository from the internet…（也就是把刚刚在vercel建立的项目克隆到github） 跳出的Clone a repository弹框中，注意下面的Local path，这里要点击左边的choose选择刚刚新建的donbro空文件夹 点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送 登录github网页，点击右上角头像，选择Your repositories，点击donbro仓库，左边是更新记录和文件，右边可以看到一个蓝色链接donbro.vercel.app，点击就可以进入博客，也可以从vercel项目中进入 如果你想在同步到github之前预览效果：\n编辑好文件后，在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo server，如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\donbro\\{archetypes,content,theme\rs}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\donbro\\config.toml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\r| ZH-CN\r-------------------+--------\rPages | 11\rPaginator pages | 0\rNon-page files | 0\rStatic files | 11\rProcessed images | 0\rAliases | 0\rCleaned | 0\rBuilt in 110 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableF\rastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的**http://localhost:1313**就是预览网址\n新建文章 # 在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo new posts/文章名字.md，回车后，hugo会在D:\\blog\\github_wsw_hugo\\donbro\\content\\posts文件夹中创建一个新的md文件，用Markdown编辑器（比如Tyopa）打开后，就可以写文章了\n文章属性模板：用以指定文章的标题、分类、Tag、是否为草稿、是否隐藏等属性。\n打开D:\\blog\\github_wsw_hugo\\donbro\\content\\posts\\archetypes文件夹下的default.md文件，将下面的代码粘贴进去，不需要的属性可以自由删除（【】内是解释，请自行删除）\n---\rtitle: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34;【用git新建文章会自动填写】\rauthor: \u0026#34;\u0026#34;【作者，建议填入本人名字默认】\rdescription: \u0026#34;\u0026#34;【描述】\rdate: {{ .Date }}【自动填写建立时间】\rcategories: [\u0026#34;\u0026#34;]【分类】\rtags: [\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]【标签】\rdraft: 【是否为草稿，可以填false/ture默认，或者每次新建文件自行填写】\rhidden: 【是否隐藏，可以填false/ture默认，或者每次新建文件自行填写】\r--- 提示：单击右键，选择Open Git Bash Here，然后在git中输入命令的前提是，==右键时文件夹内必须有config.toml文件==。\n安装主题 # 其实这篇流水账记录到上面就已经结束了，剩下的是更复杂的花里胡哨部分~\n在此附上Hugo主题下载网址：https://themes.gohugo.io/，大(剩)家(下)自(的)由(我)发(不)挥(会)吧(了)！\n","date":"2025年4月2日","externalUrl":null,"permalink":"/posts/hugo-%E5%B0%8F%E7%99%BD%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","section":"Posts","summary":"","title":"Hugo-小白博客部署记录","type":"posts"},{"content":" 感谢“小球飞鱼”的教程，以及在这个过程提供帮助的各位朋友\n本文仅作为方便自己以后回顾的的操作记录\n下载软件，注册账号 # Hugo 下载地址：https://github.com/gohugoio/hugo/releases\n打开链接后往下拉，找到Assets，下载最新的带extended的版本，或者直接点hugo_extended_0.145.0_windows-amd64.zip下载\n下载后解压到解压博客文件夹在的位置，比如说，我在D盘建了一个blog文件，那么解压后的hugo文件夹就要移动到这个blog文件夹里（后文举例都用这个）\nGit 下载地址：https://git-scm.com\n打开链接后点击Download for Windows，下载64-bit Git for Windows Setup，或者直接点Git-2.49.0-64-bit.exe下载\n下载后安装，安装路径随意，一直点下一步直到安装成功\nGithub账号 注册网址：https://github.com\n最好用谷歌邮箱，或者别的国外邮箱\nGithub Desktop 下载地址：https://github.com/apps/desktop\nVScode 下载地址：https://code.visualstudio.com\n下载后点击左下角设置，再点击Extensions（扩展），搜索Chinese Language Pack for Visual Studio Code（汉化） 和Markdown All in One插件，点击install安装\n汉化插件启动：快捷键【Ctrl+Shift+P】打开命令搜索框，输入【configure language】,点击【Display language】这行，点击【中文（简体）】这行，在弹出框中点【Restart】重启VScode\n安装HUGO # Hugo.exe放在D盘的blog文件中，可以从文件上方看到文件路径为D:\\blog\\hugo_extended_0.145.0_windows-amd64，在地址栏复制路径\n【win+R】，输入sysmd.cpl，按回车 进入高级选项卡，点击环境变量 在系统变量部分，找到Path变量，点击编辑 在编辑环境变量窗口中，点击新建，然后将上面的路径粘贴到这里 依次点确定关闭所有窗口 测试是否成功：（命令窗口复制粘贴只能右键，不能用快捷键）\n在D:\\blog中任意空白处右键，点击Open Git Bash Here，在弹出的命令行界面中输入hugo version，如果步骤正确，会显示：\nhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 BuildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio 显示结果中的0.145.0是hugo的版本号，后面需要用\n搭建博客 # 注册Verce：https://vercel.com，点击右上角Sign Up，选择 I'm working on personal projects（hobby），给自己取个名字，再点击Continue\n选择使用Github账号注册，登录前面注册的github账号，弹出授权窗口时，点击Authorize Vercel\n在Let\u0026rsquo;s build something new页面，点击右边Clone Template项目下方的Browse All Templates，左边搜索栏输入hugo，会出现Hugo Starter项目，点开\n如果没有看到这个界面，点击右上角头像，点击Dashboard，点击右上角黑色的Add New project\n点击左边Deploy，点击Git Scope的下拉列表，点击Add GitHub Org or Account，弹出安装窗口，点击Install\n在Git Scope下拉列表中点击你的Github账户，在右侧Private Repository Name位置输入仓库名，我这里输入donbro==（这个名字很重要！它决定了博客的域名！）==，点击Create，大概等1分钟左右，会弹出来一个**Congratulations！**的弹窗，代表Vercel已经自动搭建好一个Hugo博客\n点击Continue to Dashboard进入管理页面，Domains下面的donbro.vercel.app就是自动分配的访问网址域名，点击可以直接进入博客\n点击右上角头像，点击Dashboard，看到刚刚建立的Hugo项目，点击项目右上角三个点后再点击Setting进入设置\n点击左侧Environment Variables，key处填写HUGO_VERSION，Value处填写版本号(上面写了怎么查)，最后点击save\n推送到Github # 这个博客更新的顺序是，你在本地新建一篇md文件，然后通过github Desktop同步更新到Github，然后再更新到你的博客域名\n在D盘的blog文件夹中新建一个名为donbro 的==空==文件夹，这里特意和vercel的项目同名是为了方便自己看 打开Github Desktop，登录Github账号，选择Clone a repository from the internet…（也就是把刚刚在vercel建立的项目克隆到github） 跳出的Clone a repository弹框中，注意下面的Local path，这里要点击左边的choose选择刚刚新建的donbro空文件夹 点击左边Changes栏，点击文件名可以看到具体内容，勾选要同步的文件，下方Summary(required)为本次更新行为命名，再点击最下面Commit to main提交，最后点击上方第三个大黑框Push origin进行推送 登录github网页，点击右上角头像，选择Your repositories，点击donbro仓库，左边是更新记录和文件，右边可以看到一个蓝色链接donbro.vercel.app，点击就可以进入博客，也可以从vercel项目中进入 如果你想在同步到github之前预览效果：\n编辑好文件后，在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo server，如果步骤正确，会显示：\nWatching for changes in D:\\blog\\github_wsw_hugo\\donbro\\{archetypes,content,theme\rs}\rWatching for config changes in D:\\blog\\github_wsw_hugo\\donbro\\config.toml\rStart building sites …\rhugo v0.145.0-666444f0a52132f9fec9f71cf25b441cc6a4f355+extended windows/amd64 Bu\rildDate=2025-02-26T15:41:25Z VendorInfo=gohugoio\r| ZH-CN\r-------------------+--------\rPages | 11\rPaginator pages | 0\rNon-page files | 0\rStatic files | 11\rProcessed images | 0\rAliases | 0\rCleaned | 0\rBuilt in 110 ms\rEnvironment: \u0026#34;development\u0026#34;\rServing pages from disk\rRunning in Fast Render Mode. For full rebuilds on change: hugo server --disableF\rastRender\rWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1)\rPress Ctrl+C to stop 显示结果最后的**http://localhost:1313**就是预览网址\n新建文章 # 在D:\\blog\\github_wsw_hugo\\donbro文件夹的空白处单击右键，选择Open Git Bash Here，在弹出的命令行界面中输入hugo new posts/文章名字.md，回车后，hugo会在D:\\blog\\github_wsw_hugo\\donbro\\content\\posts文件夹中创建一个新的md文件，用Markdown编辑器（比如Tyopa）打开后，就可以写文章了\n文章属性模板：用以指定文章的标题、分类、Tag、是否为草稿、是否隐藏等属性。\n打开D:\\blog\\github_wsw_hugo\\donbro\\content\\posts\\archetypes文件夹下的default.md文件，将下面的代码粘贴进去，不需要的属性可以自由删除（【】内是解释，请自行删除）\n---\rtitle: \u0026#34;{{ replace .Name \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#34;【用git新建文章会自动填写】\rauthor: \u0026#34;\u0026#34;【作者，建议填入本人名字默认】\rdescription: \u0026#34;\u0026#34;【描述】\rdate: {{ .Date }}【自动填写建立时间】\rcategories: [\u0026#34;\u0026#34;]【分类】\rtags: [\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]【标签】\rdraft: 【是否为草稿，可以填false/ture默认，或者每次新建文件自行填写】\rhidden: 【是否隐藏，可以填false/ture默认，或者每次新建文件自行填写】\r--- 提示：单击右键，选择Open Git Bash Here，然后在git中输入命令的前提是，==右键时文件夹内必须有config.toml文件==。\n安装主题 # 其实这篇流水账记录到上面就已经结束了，剩下的是更复杂的花里胡哨部分~\n在此附上Hugo主题下载网址：https://themes.gohugo.io/，大(剩)家(下)自(的)由(我)发(不)挥(会)吧(了)！\n","date":"2025年4月2日","externalUrl":null,"permalink":"/zh-cn/posts/hugo-%E5%B0%8F%E7%99%BD%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E8%AE%B0%E5%BD%95/","section":"早上中午晚上好~","summary":"","title":"Hugo-小白博客部署记录","type":"zh-cn"},{"content":"","date":"2025年4月1日","externalUrl":null,"permalink":"/categories/%E5%85%B6%E4%BB%96/","section":"Categories","summary":"","title":"其他","type":"categories"},{"content":"","date":"2025年4月1日","externalUrl":null,"permalink":"/zh-cn/","section":"早上中午晚上好~","summary":"","title":"早上中午晚上好~","type":"zh-cn"},{"content":"","externalUrl":null,"permalink":"/en/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/en/","section":"Blowfish","summary":"","title":"Blowfish","type":"page"},{"content":"","externalUrl":null,"permalink":"/en/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/en/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/en/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]